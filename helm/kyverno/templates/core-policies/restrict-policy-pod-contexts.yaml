{{- if .Values.policyExceptions.enableNoisyContextsPolicy }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-noisy-policy-contexts
  labels:
    {{- include "kyverno-stack.labels" . | nindent 4 }}
  annotations:
    policies.kyverno.io/title: Disallow Noisy Policy Contexts
    policies.kyverno.io/category: Security, Best Practices
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Policy, ClusterPolicy
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      This Policy prevents creating other (Cluster)Policies which make external context calls for high-volume resources.
      API calls and external service calls add latency to each admission review, which can compound problems during
      periods of heavy cluster admission activity or CrashLoopBackOffs. When possible, policies requiring external uncached context variables
      should be written for equivalent higher-level controllers (e.g. Deployments instead of Pods), or use a ConfigMap instead.
    {{- include "kyverno-stack.policyInstallAnnotations" . | nindent 4 }}
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: noisy-contexts
      match:
        any:
        - resources:
            kinds:
              - Policy
              - ClusterPolicy
      preconditions:
        all:
        - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
          operator: NotEquals
          value: DELETE
      validate:
        message: >-
          Making API or external service calls for every admission increases API server load and compounds load-related issues.
          When possible, policies should use ConfigMap data for contexts, or be written for higher level objects (e.g. Deployments instead of Pods).
        deny:
          conditions:
            all:
              # Check if the policy matches Pods (or other high-volume types).
            - key: "{{`{{ request.object.spec.rules[].match.[any, all][][].resources[].kinds[] || '[]' }}`}}"
              operator: AnyIn
              value:
              - Pod
              # Check if the policy includes context types that send requests to external services.
            - key: "{{`{{ request.object.spec.rules[].context[].keys(@)[] || 'empty' }}`}}"
              operator: AnyIn
              value:
                - apiCall
                - external
{{- end }}
